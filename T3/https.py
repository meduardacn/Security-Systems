import sys
import hashlib

data = sys.argv
##################################################################
#### Etapa 1: Geração de chave usando Diffie-Hellman
##################################################################
#### Passo 1: gerar um valor a menor que p e calcular A = g**a mod p.

p = "0B10B8F96A080E01DDE92DE5EAE5D54EC52C99FBCFB06A3C69A6A9DCA52D23B616073E28675A23D189838EF1E2EE652C013ECB4AEA906112324975C3CD49B83BFACCBDD7D90C4BD7098488E9C219A73724EFFD6FAE5644738FAA31A4FF55BCCC0A151AF5F0DC8B4BD45BF37DF365C1A65E68CFDA76D4DA708DF1FB2BC2E4A4371"
g = "0A4D1CBD5C3FD34126765A442EFB99905F8104DD258AC507FD6406CFF14266D31266FEA1E5C41564B777E690F5504F213160217B4B01B886A5E91547F9E2749F4D7FBD7D3B9A92EE1909D0D2263F80A76A6A24C087A091F531DBF0A0169B6A28AD662A4D18E73AFA32D779D5918D08BC8858F4DCEF97C2A24855E6EEB22B3B2E5"
p = int(p, 16)
g = int(g, 16)

a = 1434365

#A = g**a % p
A = 115235192002095284167566143416355874134919738969278108323107599925855610053424655701918293810648079395946994972972922262402334374707875676272322165103411679414056693542306893845620979286198286784585695809473296078382384191173270408880954745756688336910304764026910967879384181829338828864978491915688282424615
print("A",("0%x" % A).upper())

##################################################################
#### Passo 2: receber um valor B (em hexadecimal) e calcular V = B**a mod p
#### Para receber o B e calcular o Valor de V é necessário descomentar as linhas 26,30 e comentar as linhas 27,31
#### python3 https.py <B em hexa>
# B = data[1] 
B = "585068BD6F89F4D5F0A870C1D88BE173FCFCB56437CDA4CAEBF1A5B3FAA5796F50BE88AE5A7A21928F2C4E02E79511113CBEE483976474C4C77FA64F45A4AD539F78EAA5B695CEA09290FC528EA09F7CA3CE0A520A21F70E2DD58F970B059B0760731F44B72870CC6ED76F66C51427276E6CB3912128E67C2B4956B5FDBF0975"
B = int(B, 16)

#V = B**a % p
V = 57431333054461677263324907124497831578431986187958353871684337082914377940698974894468727652156207555117200575624539923385557226661119822779764604293170779330694430429276586320114974322196034059791952080510451316385334657679505097730059265847762761268050743452425397258874146707513665445610127817644787500724
#print("V",V,"\n")
#print("V",("0%x" % V).upper())

##################################################################
#### Passo 3: calcular S = SHA256(V) e usar os primeiros 128 bits como senha para se comunicar
v = bytearray.fromhex(("%x" % V))
S = hashlib.sha256(v).hexdigest().upper()[:32]    # V em int
#S = "FAE9223FEB4CA59080BFB1378FEA56F0"
print("S")
print(S)


##################################################################
##################################################################

#A 115235192002095284167566143416355874134919738969278108323107599925855610053424655701918293810648079395946994972972922262402334374707875676272322165103411679414056693542306893845620979286198286784585695809473296078382384191173270408880954745756688336910304764026910967879384181829338828864978491915688282424615
#
#A 0A419B13A07A04067E2C0F73A9F60A0C1008882D28FF6ABD5BA3E5813A86FB88235A4AC5E08CF075F79905A2EC5CD82AA5D0D14B36F96B4C6805402E740D93EA251372D5010F21582A7D644A6111429F152338E7D33262AE8A02562D612F96207C7781BCC07902153EAC77668CCADBC6CEF8EF6ADF58CB065D3F99CFD778C0527

#V 57431333054461677263324907124497831578431986187958353871684337082914377940698974894468727652156207555117200575624539923385557226661119822779764604293170779330694430429276586320114974322196034059791952080510451316385334657679505097730059265847762761268050743452425397258874146707513665445610127817644787500724
#
#V 051C8F15EC493F9CD11073432ADDA0A29D763B8CBDBA81E66592F2E116CC79255A31C2410C768BBB3E593D3B65330278E958F4EACDD46F6E4FBA1F3F28482164A8A677652CB728E4B0CACD7168DF8DFAA8D2BF6174AA049F92ED299DE0DFEA4991A4DC90F71E91F5E5D1238E316EC7379353F427A4B874E07B84F39183AFE06B4
